#!/bin/bash
# IP Change Detector and Notifier.
# https://bitbucket.org/Zachary_DuBois/ip-updater
# (c) Copyright Zachary DuBois, 2014. All rights reserved.
version="v0.2"


##
# Variables
##

# API Information
dnsToken=""
domain=""
recordID1=""
recordName1=""
# The next two are optional
recordID2=""
recordName2=""
# Log Location (Must be absolute)
logLocation=""
# If you don't want to use Pushover, leave pushoverAppKey and/or pushoverUserKey set to "".
pushoverAppKey=""
pushoverUserKey=""
pushoverTitle="IP Updater"
pushoverURL=""
pushoverURLTitle=""
# Other (You should not need to modify these)
ip="$(curl -s http://icanhazip.com/)"
lastIP="$(tail -n 1 $logLocation | awk -F' ' '{ print $5 }')"
time="$(date '+%F %T')"


##
# Startup Checks
##

# Check if root
if [[ "$(id -u)" == "0" ]]
then
  echo "Do not run this script as root."
  exit 1
fi

# Check for curl
which curl > /dev/null
checkForCurl=$?
if [[ "$checkForCurl" != "0" ]]
then 
  echo "You need curl to run this script."
  exit 1
fi

# Check for variables set correctly
if [[ "$dnsToken" == "" ]] && [[ "$domain" == "" ]] && [[ "$recordID1" == "" ]] && [[ "$recordName1" == "" ]] && [[ "$logLocation" == "" ]]
then
  echo "You have not set all the required variables in the variables block. Please edit them with the correct details."
  exit 1
fi

# Check if locations and files exist.
if ! [[ -r "$logLocation" ]]
then
  echo "The log location does not exist. Attempting to create one."
  echo "YYYY-MM-DD HH:MM:SS 127.0.0.1 X X X" > $logLocation
  logCreateStatus=$?
  if [[ "$logCreateStatus" != "0" ]]
  then
    echo "Failed to make the log file. Exitting."
    exit 1
  fi
fi


##
# Start
##

pushoverSend() {
  message=$1
  if [[ "$pushoverAppKey" != "" ]] && [[ "$pushoverUserKey" != "" ]]
  then
    curl -s --form-string "token=$pushoverAppKey" --form-string "user=$pushoverUserKey" --form-string "url=$pushoverURL" --form-string "url_title=$pushoverURLTitle" --form-string "priority=0" --form-string "title=$pushoverTitle" --form-string "message=$message" https://api.pushover.net/1/messages.json > /dev/null
    pushoverStatus=$?
    if [[ "$pushoverStatus" == "0" ]]
    then
      echo "Pushover message sent successfully: $message"
    else
      echo "Pushover failed to send message: $message"
    fi
  else
    echo "No Pushover key set to send message: $message"
  fi
}

dnsUpdate() {
  updatedIP=$1
  forceUpdate=$2
  
  curl -s -X PUT "https://api.digitalocean.com/v2/domains/$domain/records/$recordID1" -d'{"name":"'$recordName1'", "data":"'$ip'"}' -H "Authorization: Bearer $dnsToken" -H "Content-Type: application/json"
  dns1=$?
  
  if [[ "$recordID2" != "" ]] && [[ "$recordName2" != "" ]] || [[ "$forceUpdate" == "Y" ]]
  then
    curl -s -X PUT "https://api.digitalocean.com/v2/domains/$domain/records/$recordID1" -d'{"name":"'$recordName1'", "data":"'$ip'"}' -H "Authorization: Bearer $dnsToken" -H "Content-Type: application/json"
    dns2=$?
  fi
}

logMSG="$time $ip"
logInformation() {
  statusCode=$1
  
  if [[ "$statusCode" == "" ]]
  then
    logStatus="C"
  elif [[ "$statusCode" == "0" ]]
  then
    logStatus="+"
  else
    logStatus="X"
  fi
  
  logMSG="$logMSG $logStatus"
}

if [[ "$ip" == "" ]]
then
  
  ##
  # No IP/Internet
  ##
  
  ip="UNAVAILABLE"
else

  ##
  # If IP Changed
  ##

  # Notify via Pushover
  pushoverSend "Your IP has changed! Your new IP is $ip (Changed from $lastIP)"
  # Update the DNS
  dnsUpdate "$ip"
fi

##
# Fail Check
##

lastStatus=()
lastStatusInt=4
actionList=("pushoverSend "Your IP has changed! Your new IP is $ip (Changed from $lastIP)"" "dnsUpdate "$ip"" "dnsUpdate "$ip" "Y""})
actionListInt=0

while [[ "$(tail -n 1 $logLocation | awk -F' ' '{ print $"$lastStatusInt" }' )" != "" ]]
do
  lastStatus+= "$(tail -n 1 $logLocation | awk -F' ' '{ print $"$lastStatusInt" }' )"
  lastStatusInt=$(($lastStatusInt+1))
done

for lastStat in "${lastStatus[@]}"
do
  if [[ "$lastStat" == "X" ]]
  then
    eval "${actionList[$actionListInt]}"
  fi
  actionListInt=$(($actionListInt+1))
done


##
# Write Log
##
logInformation "$pushoverStatus"
logInformation "$dns1"
logInformation "$dns2"
echo "$logMSG" >> $logLocation


exit 0
